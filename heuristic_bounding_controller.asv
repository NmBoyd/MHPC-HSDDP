function [xbar, ybar, ubar] = heuristic_bounding_controller(model, modeSeq, hybridT)
xbar = [x0];
ubar = [];
ybar = [];
%% flight phase reference angles
the_ref = [pi/4,-pi*7/12,pi/4,-pi*7/12]';
l_0 = 0.2462;
kp = 5*diag([8,1,12,10]);
kd = 1*diag([1,1,1,1]);
K_sp = 2200;
ind_bs = 0;
ind_fs = 0;

k = 1; % time step

for idx = 1:length(modeSeq)
    mode = modeSeq(idx);
    for k = 1:hybridT(idx).N_horizon - 1
        xk  =   hybridT(idx).Xbar(:,k);
        qk  =   xk(1:model.qsize,1);
        switch mode
            case 1
                
            case 3
                
            case {2,4}
            
        end
        [xk_next, yk] = model.dynamics(xk, uk, mode);
        hybridT(idx).Xbar(:, k+1) = xk_next;
        hybridT(idx).Ubar(:, k)   = uk;
        hybridT(idx).Y(:, k)      = yk;
    end
    hybridT(idx).Ubar(:, end)    = hybridT(idx).Ubar(:, end - 1);
    hybridT(idx).Y(:, end)       = hybridT(idx).Y(:, end - 1);
    if idx < length(modeSeq)
        xk
    end
end

for mode_ind = 1:length(P)
    for i = 1:len_mode(mode_ind)
        xk = xbar(:,k);
        qk = xk(1:model.qsize,1);
        
        if i < len_mode(mode_ind) % continuous dyn
            switch P(mode_ind)
                case 1 % bs
                    ind_bs = ind_bs + 1;
                    [Jc,~] = BackJacobian(xk);
                    Jc(:,1:3) = [];
                    v = spring_vec(qk,robot_params, P(mode_ind));
                    Fk = -v/norm(v)*K_sp*(norm(v)-l_0);
                    uk = -Jc'*Fk*3;
                    if ind_bs ~= 1
                        uk = -Jc'*Fk*1.7;
                    end
                case {2,4} % f1 f2
                    the_k = xk(4:7,1);
                    thed_k = xk(11:end,1);
                    uk = kp*(the_ref-the_k) - kd*thed_k; % first flight
                case 3 % fs
                    ind_fs = ind_fs + 1;
                    [Jc,~] = FrontJacobian(xk);
                    Jc(:,1:3) = [];
                    v = spring_vec(qk,robot_params, P(mode_ind));
                    Fk = -v/norm(v)*K_sp*(norm(v)-l_0);
                    uk = -Jc'*Fk*2.2;
                    if ind_fs ~= 1
                        uk = -Jc'*Fk*1.4;
                    end                    
            end
            [xk_next,yk] = model.forward_dynamics(uk, xk, P(mode_ind),'cont');
        else % reset map
            uk = zeros(model.usize,1); % no control at priori instant
            [xk_next,yk] = model.forward_dynamics(uk, xk, P(mode_ind),'reset');
        end
        
        % store data
        ubar(:,k) = uk;
        ybar(:,k) = yk;
        if k == sum(len_mode)
            break;
        end
        xbar(:,k+1) = xk_next;
        k = k + 1;
    end
end

end

